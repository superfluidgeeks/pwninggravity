function Map(){    this.blockSize=32;    this.physicDir="down";    this.sprite=new Image();    this.mapArray=new Array();    this.resolutionX=null;    this.resolutionY=null;    this.startPointX=null;    this.startPointY=null;    this.block=1;    this.startPoint=2;    this.mapObject=null;    this.collidingObjects=null;    this.allMaps=new Array();}Map.prototype.init=function(){    try{        this.resolutionY=Math.round(app.height/this.mapArray.length);        this.resolutionX=Math.round(app.width/this.mapArray[0].length);        this.setStartingPoint();        this.sprite.src=scene.obstacle.spriteSrc;        this.collidingObjects=scene.collidingObjects;        logger.debug("Display width: "+app.width+" height: "+app.height+" mapArray Y:"+this.mapArray.length+" X:"+this.mapArray[1].length+" resoluton: X:"+this.resolutionX+" Y: "+this.resolutionY);        hud.history.push("Map: "+map.mapObject.name+" loaded");        logger.debug("Map initialized");        scene.initializeSmokePointOnMap();        return true;    }catch(excp){        logger.debug("Map initializion failed>>> "+excp);        return false;    }}Map.prototype.loadLevel=function(level){    for(var i=0;i<this.allMaps.length;i++){        if(level==this.allMaps[i].name){            this.mapObject=this.allMaps[i];            this.mapArray=this.mapObject.mapArray;	        }    }    logger.debug("Level "+level+" loaded");}Map.prototype.resize=function(){    app.width=window.innerWidth;    app.height=window.innerHeight;    app.canvas.style.height=app.height;    app.canvas.style.width=app.width;    this.resolutionY=Math.round(app.height/this.mapArray.length);    this.resolutionX=Math.round(app.width/this.mapArray[0].length);    logger.debug("Window resized");}Map.prototype.getObjectPosition=function(object){    for(var y=0;y<map.mapArray.length;y++){        for(var x=0;x<map.mapArray[y].length;x++){            if(map.mapArray[y][x]==object){                console.log(x);                return [x,y];            }        }    }    return [];}Map.prototype.clearPosition=function(x,y){    this.mapArray[y][x]=0;    logger.debug("Position cleared");}Map.prototype.clearObject=function(object){    for(var y=0;y<map.mapArray.length;y++){        for(var x=0;x<map.mapArray[y].length;x++){            if(map.mapArray[y][x]==object){                map.mapArray[y][x]=0;                logger.debug("Object cleared");            }        }    }         }Map.prototype.canObjectCollide=function(obj){    for(var i=0;i<this.collidingObjects.length;i++){        if(obj==this.collidingObjects[i]){            return true;        }                }    return false;}Map.prototype.openDoor=function(){   	if(player.hasKey){     		this.clearObject(scene.obstacle.door.object);		logger.debug("Door open");		hud.history.push("Door now open");	}}Map.prototype.draw=function(){       for(var y=0;y<this.mapArray.length;y++){        for(var x=0;x<this.mapArray[y].length;x++){            if(this.mapArray[y][x]==scene.obstacle.block.object){                app.ctx.drawImage(this.sprite, scene.obstacle.block.spriteX, scene.obstacle.block.spriteY, 64, 64, x*this.resolutionX, y*this.resolutionY, this.resolutionX, this.resolutionY);            }            if(this.mapArray[y][x]==scene.obstacle.key.object){                app.ctx.drawImage(this.sprite, scene.obstacle.key.spriteX, scene.obstacle.key.spriteY, 64, 64, x*this.resolutionX, y*this.resolutionY, this.resolutionX, this.resolutionY);            }            if(this.mapArray[y][x]==scene.obstacle.door.object){                app.ctx.drawImage(this.sprite, scene.obstacle.door.spriteX, scene.obstacle.door.spriteY, 64, 64, x*this.resolutionX, y*this.resolutionY, this.resolutionX, this.resolutionY);            }            if(this.mapArray[y][x]==scene.obstacle.exitShield.object){                app.ctx.drawImage(this.sprite, scene.obstacle.exitShield.spriteX, scene.obstacle.exitShield.spriteY, 64, 64, x*this.resolutionX, y*this.resolutionY, this.resolutionX, this.resolutionY);            }            if(this.mapArray[y][x]==scene.obstacle.wires.object){                app.ctx.drawImage(this.sprite, scene.obstacle.wires.spriteX, scene.obstacle.wires.spriteY, 64, 64, x*this.resolutionX, y*this.resolutionY, this.resolutionX, this.resolutionY);            }            if(this.mapArray[y][x]==scene.obstacle.coin.object){                app.ctx.drawImage(this.sprite, scene.obstacle.coin.spriteX, scene.obstacle.coin.spriteY, 64, 64, x*this.resolutionX, y*this.resolutionY, this.resolutionX, this.resolutionY);            }            if(this.mapArray[y][x]==scene.obstacle.block2.object){                app.ctx.drawImage(this.sprite, scene.obstacle.block2.spriteX, scene.obstacle.block2.spriteY, 64, 64, x*this.resolutionX, y*this.resolutionY, this.resolutionX, this.resolutionY);            }			if(this.mapArray[y][x]==scene.obstacle.trap.object){				//app.ctx.fillRect(x*this.resolutionX, y*this.resolutionY,this.resolutionX, this.resolutionY);                app.ctx.drawImage(this.sprite, scene.obstacle.trap.spriteX, scene.obstacle.trap.spriteY, 64, 64, x*this.resolutionX, y*this.resolutionY, this.resolutionX, this.resolutionY);            }        }    }       }Map.prototype.setStartingPoint=function(){    for(var y=0;y<this.mapArray.length;y++){        for(var x=0;x<this.mapArray[y].length;x++){            if(this.mapArray[y][x]==scene.obstacle.startPos.object){                this.startPointX=x*this.resolutionX                this.startPointY=y*this.resolutionY            }        }    }}