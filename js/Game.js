function Game(){
    this.fps=null;    this.realFPS=0;    this.finish=false;    this.countGravityChanges=0;    this.smokePoint=new Array();    this.screenMessages=new Array();    this.level=1;    this.score=0;	this.currentLevel=null;}Game.prototype.start=function(){    setInterval("game.render()", 1000/this.fps);}Game.prototype.render=function(){    if(!this.finish){        this.clean();        app.ctx.fillStyle = "rgba(100,100,100,0.7)";        app.ctx.fillRect(0,0,app.width, app.height);        player.update();        hud.gravityTimer();        map.draw();                    for(var i=0;i<this.smokePoint.length;i++){            if(!this.smokePoint[i].finished){                this.smokePoint[i].render();            }else{                this.smokePoint.splice(i,1);            }        }        for(var i=0;i<this.screenMessages.length;i++){            if(!this.screenMessages[i].canDelete){                this.screenMessages[i].render();            }else{                this.screenMessages.splice(i,1);            }        }                    hud.pendulum((app.width-100),100, player.angle+45+180);        hud.showHistory();        hud.showScores();        hud.life();        if(this.finish)hud.levelCompletedShow();    }       }Game.prototype.clean=function(){    app.ctx.clearRect(0, 0, app.width, app.height);}Game.prototype.end=function(){   	//clearInterval("game.render()");         //window.location="./index.html";}Game.prototype.gameOver=function(){    instructions.gameOver();}Game.prototype.restartLevel=function(){	this.smokePoint=new Array();	this.screenMessages=new Array();	map = new Map();	mapManager.init();	map.loadLevel(this.currentLevel);	map.init();	player.x=map.startPointX;	player.y=map.startPointY;	player.angle=0;}Game.prototype.nextLevel=function(){    if(this.level>=map.allMaps.length){        instructions.gameEnd();        this.finish=true;    }else{        this.smokePoint=new Array();        this.screenMessages=new Array();        hud.clearHistory();        this.level++;        map = new Map();        mapManager.init();        map.loadLevel(map.allMaps[this.level-1].name);		this.currentLevel=map.allMaps[this.level-1].name;        map.init();        player.hasKey=false;        player.init();    }}